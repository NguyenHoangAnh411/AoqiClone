'use client';

import { useState, useEffect } from 'react';
import { useAuthContext } from '@/components/AuthProvider';
import { adminAPI, userAPI } from '@/lib/api';
import Link from 'next/link';
import styles from './dashboard.module.css';

interface DashboardStats {
  totalUsers: number;
  totalPets: number;
  totalSkills: number;
  totalBattles: number;
  recentUsers: any[];
  recentPets: any[];
}

export default function AdminDashboard() {
  const { user, getToken, isAdmin, loading: authLoading } = useAuthContext();

  // Function ƒë·ªÉ force load user data t·ª´ localStorage
  const forceLoadUserData = async () => {
    const userToken = localStorage.getItem('userToken');
    if (userToken) {
      try {
        const userData = await userAPI.getUserData(userToken);
        window.dispatchEvent(new CustomEvent('userDataUpdated', { 
          detail: { userData, token: userToken } 
        }));
      } catch (error) {
        console.error('Error force loading user data:', error);
      }
    }
  };
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (!mounted || authLoading) return;
    
    const loadDashboard = async () => {
      try {
        const token = getToken();
        if (!token) {
          setError('Kh√¥ng c√≥ token x√°c th·ª±c');
          setLoading(false);
          return;
        }

        const data = await adminAPI.getDashboard(token);
        setStats(data);
      } catch (err) {
        console.error('Dashboard error:', err);
        setError('L·ªói khi t·∫£i d·ªØ li·ªáu dashboard');
      } finally {
        setLoading(false);
      }
    };

    if (user && isAdmin()) {
      loadDashboard();
    }
  }, [getToken, mounted, user, isAdmin, authLoading]);

  if (!mounted || authLoading || !user) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingCard}>
          <div className={styles.spinner}></div>
          <p>ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  if (!isAdmin()) {
    return (
      <div className={styles.container}>
        <div className={styles.errorCard}>
          <h2>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
          <p>B·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y.</p>
          <Link href="/" className={styles.button}>
            V·ªÅ trang ch·ªß
          </Link>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingCard}>
          <div className={styles.spinner}></div>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.errorCard}>
          <h2>L·ªói</h2>
          <p>{error}</p>
          <button onClick={() => window.location.reload()} className={styles.button}>
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1>Admin Dashboard</h1>
        <p>Ch√†o m·ª´ng, {user?.username || 'Admin'}!</p>
      </div>

      {/* Stats Cards */}
      <div className={styles.statsGrid}>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>üë•</div>
          <div className={styles.statContent}>
            <h3>{stats?.totalUsers || 0}</h3>
            <p>T·ªïng ng∆∞·ªùi d√πng</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üêæ</div>
          <div className={styles.statContent}>
            <h3>{stats?.totalPets || 0}</h3>
            <p>T·ªïng linh th√∫</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>‚öîÔ∏è</div>
          <div className={styles.statContent}>
            <h3>{stats?.totalSkills || 0}</h3>
            <p>T·ªïng k·ªπ nƒÉng</p>
          </div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>üèÜ</div>
          <div className={styles.statContent}>
            <h3>{stats?.totalBattles || 0}</h3>
            <p>T·ªïng tr·∫≠n ƒë·∫•u</p>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className={styles.section}>
        <h2>Qu·∫£n l√Ω nhanh</h2>
        <div className={styles.actionGrid}>
          <Link href="/admin/pets" className={styles.actionCard}>
            <div className={styles.actionIcon}>üêæ</div>
            <h3>Qu·∫£n l√Ω Linh th√∫</h3>
            <p>Th√™m, s·ª≠a, x√≥a linh th√∫ v√† k·ªπ nƒÉng</p>
          </Link>

          <Link href="/admin/users" className={styles.actionCard}>
            <div className={styles.actionIcon}>üë•</div>
            <h3>Qu·∫£n l√Ω Ng∆∞·ªùi d√πng</h3>
            <p>Xem danh s√°ch v√† th·ªëng k√™ ng∆∞·ªùi d√πng</p>
          </Link>

          <Link href="/admin/battles" className={styles.actionCard}>
            <div className={styles.actionIcon}>‚öîÔ∏è</div>
            <h3>L·ªãch s·ª≠ Chi·∫øn ƒë·∫•u</h3>
            <p>Xem th·ªëng k√™ v√† l·ªãch s·ª≠ tr·∫≠n ƒë·∫•u</p>
          </Link>

          <Link href="/admin/skills" className={styles.actionCard}>
            <div className={styles.actionIcon}>üîÆ</div>
            <h3>Qu·∫£n l√Ω K·ªπ nƒÉng</h3>
            <p>T·∫°o v√† qu·∫£n l√Ω c√°c k·ªπ nƒÉng</p>
          </Link>
        </div>
      </div>

      {/* Recent Activity */}
      <div className={styles.section}>
        <h2>Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h2>
        <div className={styles.activityGrid}>
          <div className={styles.activityCard}>
            <h3>Ng∆∞·ªùi d√πng m·ªõi</h3>
            <div className={styles.activityList}>
              {stats?.recentUsers?.slice(0, 5).map((user: any, index: number) => (
                <div key={index} className={styles.activityItem}>
                  <span className={styles.activityText}>{user.username}</span>
                  <span className={styles.activityTime}>
                    {new Date(user.createdAt).toLocaleDateString('vi-VN')}
                  </span>
                </div>
              ))}
              {(!stats?.recentUsers || stats.recentUsers.length === 0) && (
                <p className={styles.noData}>Ch∆∞a c√≥ ng∆∞·ªùi d√πng m·ªõi</p>
              )}
            </div>
          </div>

          <div className={styles.activityCard}>
            <h3>Linh th√∫ m·ªõi</h3>
            <div className={styles.activityList}>
              {stats?.recentPets?.slice(0, 5).map((pet: any, index: number) => (
                <div key={index} className={styles.activityItem}>
                  <span className={styles.activityText}>{pet.name}</span>
                  <span className={styles.activityTime}>
                    {new Date(pet.createdAt).toLocaleDateString('vi-VN')}
                  </span>
                </div>
              ))}
              {(!stats?.recentPets || stats.recentPets.length === 0) && (
                <p className={styles.noData}>Ch∆∞a c√≥ linh th√∫ m·ªõi</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 